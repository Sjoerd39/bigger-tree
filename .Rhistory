ungroup() %>%
mutate(X = as.numeric(as.character(X)),
Y = as.numeric(as.character(Y)))
## calculate the closes position of the runner every 15 seconds. So runners progress in
## even timeframes for easier animations
route_times <-  route_times %>%
mutate(sec15 = ceiling(sec / 15) * 15)
## calculate avarage speed each km for labeling
avg_speed <- route_times %>%
group_by(runners, km) %>%
summarise(sec_tot_prev = max(sec)) %>%
mutate(km = km + 1) %>%
right_join(route_times %>% group_by(runners, km) %>%
summarise(sec_tot_km = max(sec)),
by = c("runners", "km")) %>%
mutate(avg_speed = if_else(km == 1, round(3600 / sec_tot_km, 1),
round(3600 / (sec_tot_km - sec_tot_prev), 1))) %>%
select(runners, km, avg_speed)
## finishtime for labeling
finish_time <- route_times %>%
group_by(runners) %>%
filter(meter == max(meter)) %>%
mutate(finishtime = time) %>%
select(runners, finishtime)
## calculate avarage speed each km for labeling
avg_speed <- route_times %>%
group_by(runners, km) %>%
summarise(sec_tot_prev = max(sec)) %>%
mutate(km = km + 1) %>%
right_join(route_times %>% group_by(runners, km) %>%
summarise(sec_tot_km = max(sec)),
by = c("runners", "km")) %>%
mutate(avg_speed = if_else(km == 1, round(3600 / sec_tot_km, 1),
round(3600 / (sec_tot_km - sec_tot_prev), 1))) %>%
select(runners, km, avg_speed)
## finishtime for labeling
finish_time <- route_times %>%
group_by(runners) %>%
filter(meter == max(meter)) %>%
mutate(finishtime = time) %>%
select(runners, finishtime)
## select the point where the runners are each 15 seconds
route_times_15sec <- route_times %>%
group_by(sec15, runners) %>%
summarise_all(.funs = first) %>%
## add the labels
left_join(avg_speed, by = c("runners", "km")) %>%
left_join(finish_time, by = "runners") %>%
ungroup() %>%
mutate(label_t = paste0(finishtime, " -- ", avg_speed, " km/h"),
label_time = seconds_to_period(sec15),
label_time = paste0("race time: ", label_time)) %>%
select(-time)
## get mean coordinates for the centre of the plot
lat <- mean(c(max(route_times$Y), min(route_times$Y)))
long <- mean(c(max(route_times$X), min(route_times$X)))
## register_google(key = "key")
## get the background map
m <- get_map(c(long, lat), zoom = 13,
source = "stamen",
maptype = "toner")
register_google(key = "AIzaSyC8K2r3R1x4GNLFINGbH0-plIhAE63KnqM")
## get mean coordinates for the centre of the plot
lat <- mean(c(max(route_times$Y), min(route_times$Y)))
long <- mean(c(max(route_times$X), min(route_times$X)))
## register_google(key = "key")
## get the background map
m <- get_map(c(long, lat), zoom = 13,
source = "stamen",
maptype = "toner")
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_5sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
animate(p, nframes = 500, width = 600, height = 600)
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_5sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
animate(p, nframes = 500, width = 600, height = 600)
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_5sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_15sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
animate(p, nframes = 500, width = 600, height = 600)
googleAuthR:::gar_gadget()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knit_with_parameters('C:/Users/Administrator/Desktop/Projects/website/content/post/2018-10-17-water-levels-of-the-waal-river-animated.Rmd')
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
?rnorm
income <- c("High", "Middle", "Low", 9999999)
sex <- c("M", "F", NA)
age <- rnorm(n = 5000,  mean = 45)
age <- round(rnorm(n = 5000,  mean = 45))
table(age)
?truncnorm
install.packages("msm")
library(msm)
set.seed(20190518)
library(tidyverse)
age <- round(rtnorm(n = 5000,  mean = 45, lower = 0, upper = 99))
table(age)
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
table(age)
?sample
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
table(sex)
count(sex)
is.na(sex)
which(is.na(sex))
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Not Married"), 5000, replace = TRUE, prob = c(0.65, 0.35))
kids <- sample(c("Kids", "No Kids"), 5000, replace = TRUE, prob - c(0.45, 0.55))
kids <- sample(c("Kids", "No Kids"), 5000, replace = TRUE, prob = c(0.45, 0.55))
df.og <- data.frame(sex, age,  income, neighbourhood, married, kids)
df.og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Not Married", "Married"),
kids = if_else(age < 18, "No Kids", "Kids"))
head(df.og, 2)
library(tidyverse)
library(msm)
set.seed(20190518)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Not Married"), 5000, replace = TRUE, prob = c(0.65, 0.35))
kids <- sample(c("Kids", "No Kids"), 5000, replace = TRUE, prob = c(0.45, 0.55))
df.og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Not Married", "Married"),
kids = if_else(age < 18, "No Kids", "Kids"))
head(df.og, 2)
library(synthpop)
install.packages("randomForest")
library(synthpop)
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Not Married"), 5000, replace = TRUE, prob = c(0.65, 0.35))
kids <- sample(c("Kids", "No Kids"), 5000, replace = TRUE, prob = c(0.45, 0.55))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Not Married", "Married"),
kids = if_else(age < 18, "No Kids", "Kids"))
head(df.og, 2)
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values)
rules <- list(married = "age < 18", kids = "age < 18")
rules_values <- list(married = "Not Married", kids = "No Kids")
missings <- list(sex = c(NA), income = c("9999999"))
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Not Married"), 5000, replace = TRUE, prob = c(0.65, 0.35))
kids <- sample(c("Kids", "No Kids"), 5000, replace = TRUE, prob = c(0.3, 0.7))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Not Married", "Married"),
kids = if_else(age < 18, "No Kids", "Kids"))
head(df.og, 2)
rules <- list(married = "age < 18", kids = "age < 18")
rules_values <- list(married = "Not Married", kids = "No Kids")
missings <- list(sex = c(NA), income = c("9999999"))
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Not Married"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c("Kids", "No Kids"), 5000, replace = TRUE, prob = c(0.3, 0.7))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Not Married", "Married"),
kids = if_else(age < 18, "No Kids", "Kids"))
head(df.og, 2)
rules <- list(married = "age < 18", kids = "age < 18")
rules_values <- list(married = "Not Married", kids = "No Kids")
missings <- list(sex = c(NA), income = c("9999999"))
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c("Kids", "No Kids"), 5000, replace = TRUE, prob = c(0.3, 0.7))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Kid", married),
kids = if_else(age < 18, "No Kids", "Kids"))
head(df.og, 2)
rules <- list(married = "age < 18", kids = "age < 18")
rules_values <- list(married = "Kid", kids = "No Kids")
missings <- list(sex = c(NA), income = c("9999999"))
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Kid", married),
kids = if_else(age < 18, 0, kids))
head(df.og, 2)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Kid", married),
kids = if_else(age < 18, 0, kids))
head(df.og, 2)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Kid", married),
kids = if_else(age < 18, 0, kids))
head(df.og, 2)
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
library(tidyverse)
library(msm)
library(synthpop)
set.seed(20190518)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Kid", married),
kids = if_else(age < 18, 0, kids))
head(df.og, 2)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = if_else(age < 18, "Kid", married),
kids = if_else(age < 18, 0, kids))
head(df.og, 2)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = ifelse(age < 18, "Kid", married),
kids = ifelse(age < 18, 0, kids))
head(df.og, 2)
sex <- sample(c("M", "F", NA), 5000, replace = TRUE, prob = c(0.49, 0.5, 0.01))
age <- round(rtnorm(n = 5000,  mean = 45, sd = 24, lower = 0, upper = 99))
income <- sample(c("High", "Middle", "Low", 9999999), 5000, replace = TRUE, prob = c(30, 40, 25, 5))
#Names of neighbourhoods in Nijmegen
neighbourhood <- sample(c("Wolfskuil", "Biezen", "Centrum", "Hatert", "Hunnerberg", "Altrade"), 5000, replace = TRUE, prob = c(0.15, 0.2, 0.1, 0.25, 0.15, 0.15))
married <- sample(c("Married", "Single"), 5000, replace = TRUE, prob = c(0.45, 0.55))
kids <- sample(c(0:4), 5000, replace = TRUE, prob = c(0.4, 0.3, 0.2, 0.08, 0.02))
df_og <- data.frame(sex, age,  income, neighbourhood, married, kids) %>%
mutate(married = ifelse(age < 18, "Kid", married),
kids = ifelse(age < 18, 0, kids))
head(df_og, 2)
rules <- list(married = "age < 18", kids = "age < 18")
rules_values <- list(married = "Kid", kids = 0)
missings <- list(sex = c(NA), income = c("9999999"))
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values)
compare(df_synth, df_og)
?compare
compare(df_synth, df_og)$plot
cmpr <- compare(df_synth, df_og, nrow = 2, ncol = 3)
cmpr$plots
cmpr <- compare(df_synth, df_og, nrow = 2, ncol = 3)
cmpr$plots
df_synth$syn %>% filter(age < 18) %>% count(married, kids)
head(df_synth&syn)
head(df_synth$syn)
?syn
df_synth <- syn(df_og, cont.na = missings, rules = rules, rvalues = rules_values, print.flag = FALSE)
install.packages("blogdown")
blogdown:::new_post_addin()
blogdown::serve_site()
school_diversity <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-09-24/school_diversity.csv")
View(school_diversity)
library(tidyverse)
school_div_yr <- school_diversity %>%
select(5:11)
school_div_yr <- school_diversity %>%
select(5:10) %>%
goup_by(SCHOOL_YEAR) %>%
summarise_all(mean)
school_div_yr <- school_diversity %>%
select(5:10) %>%
group_by(SCHOOL_YEAR) %>%
summarise_all(mean)
View(school_div_yr)
library(class)
schools_train <- school_diversity %>%
filter(SCHOOL_YEAR == "1994-1995")
schools_test <- school_diversity %>%
filter(SCHOOL_YEAR == "2016-2017")
schools_train <- schools_train %>%
mutate_if(is.numeric, .fun = scale)
schools_train_cluster <- schools_train %>%
select_if(is.numeric)
schools_kmeans <- kmeans(schools_train_cluster, centers = 6, nstart = 30)
schools_kmeans <- kmeans(schools_train_cluster, centers = 6, nstart = 30)
View(schools_train_cluster)
schools_train_cluster <- schools_train %>%
select_if(is.numeric) %>%
select(-Multi, Total, variance)
schools_kmeans <- kmeans(schools_train_cluster, centers = 6, nstart = 30)
?kmeans
schools_kmeans <- kmeans(schools_train_cluster, centers = 2, nstart = 30)
summary(schools_train_cluster)
schools_train_cluster <- schools_train %>%
select_if(is.numeric) %>%
select(-Multi, -Total, -variance)
schools_kmeans <- kmeans(schools_train_cluster, centers = 2, nstart = 30)
View(schools_kmeans)
schools_kmeans <- kmeans(schools_train_cluster, centers = 6, nstart = 30)
set.seed(123)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(schools_train_cluster, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
avg_sil <- function(k) {
km.res <- kmeans(schools_train_cluster, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, dist(df))
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
library(cluster)
avg_sil <- function(k) {
km.res <- kmeans(schools_train_cluster, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, dist(df))
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
km.res <- kmeans(schools_train_cluster, centers = k, nstart = 25)
km.res <- kmeans(schools_train_cluster, centers = 2, nstart = 25)
ss <- silhouette(km.res$cluster, dist(df))
km.res$cluster
silhouette(km.res$cluster)
avg_sil <- function(k) {
km.res <- kmeans(schools_train_cluster, centers = k, nstart = 25)
ss <- silhouette(km.res$cluster, dist(schools_train_cluster))
mean(ss[, 3])
}
# Compute and plot wss for k = 2 to k = 15
k.values <- 2:15
# extract avg silhouette for 2-15 clusters
avg_sil_values <- map_dbl(k.values, avg_sil)
plot(k.values, avg_sil_values,
type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Average Silhouettes")
schools_kmeans <- kmeans(schools_train_cluster, centers = 5, nstart = 25)
fviz_cluster(schools_kmeans, data = schools_train)
install.packages("fviz_cluster")
library(fviz_cluster)
schools_train <- schools_train %>%
bind_cols(cluster = schools_kmeans$cluster)
ggplot(data = schools_train, aes(x = Black, y = white)) +
geom_point(color = cluster)
ggplot(data = schools_train, aes(x = Black, y = white)) +
geom_point(aes(color = cluster))
ggplot(data = schools_train, aes(x = Black, y = White)) +
geom_point(aes(color = cluster))
ggplot(data = schools_train, aes(x = Black, y = White)) +
geom_point(aes(color = as.factor(cluster)))
ggplot(data = schools_train, aes(x = Black, y = Hispanic)) +
geom_point(aes(color = as.factor(cluster)))
ggplot(data = schools_train, aes(x = AIAN, y = Hispanic)) +
geom_point(aes(color = as.factor(cluster)))
schools_train %>%
group_by(cluster) %>%
summary()
schools_kmeans$centers
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
