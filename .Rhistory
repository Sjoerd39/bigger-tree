theme(axis.text.x = element_text(face = "bold", size = 14, angle = 340)) +
## gganimate options
labs(title = "weeknumber: {closest_state} - 2018",
x = "measurepoint",
y = "") +
transition_states(weeknr, transition_length = 4, state_length = 0.5) +
ease_aes("sine-in-out")
df_waterlevels <- df_waterlevels %>%
filter(yr == 2017) %>%
group_by(station, weeknr) %>%
summarise(waterlevel_wk2017mean = mean(waterlevel_weekmean, na.rm = TRUE)) %>%
right_join(df_waterlevels, by = c("station", "weeknr")) %>%
mutate(waterlevel_diff = waterlevel_weekmean - waterlevel_wk2017mean) %>%
## filter missings in weekly difference
filter(!is.na(waterlevel_diff))
df_waterlevels <- read.csv2("C:/Users/Administrator/Desktop/Projects/2018/waterlevels/wl.csv", stringsAsFactors = F) %>%
clean_names() %>%
mutate(dy = as.Date(waarnemingdatum, "%d-%m-%Y"),
weeknr = week(dy),
yr = year(dy),
## replace 999999999 with NA.
waterlevel = replace(numeriekewaarde, which(numeriekewaarde == 999999999), NA)) %>%
rename(station = meetpunt_identificatie) %>%
filter(!is.na(station)) %>%
select(waterlevel, station, yr, weeknr) %>%
group_by(yr, weeknr, station) %>%
summarise(waterlevel_weekmean = mean(waterlevel, na.rm = TRUE)) %>%
left_join(pointinfo, by = "station")
df_waterlevels %>%
filter(yr == 2018, weeknr == 1) %>%
ggplot()+
geom_line(aes(x = km, y = waterlevel_weekmean))
df_waterlevels <- df_waterlevels %>%
filter(yr == 2017) %>%
group_by(station, weeknr) %>%
summarise(waterlevel_wk2017mean = mean(waterlevel_weekmean, na.rm = TRUE)) %>%
right_join(df_waterlevels, by = c("station", "weeknr")) %>%
mutate(waterlevel_diff = waterlevel_weekmean - waterlevel_wk2017mean) %>%
## filter missings in weekly difference
filter(!is.na(waterlevel_diff))
df_waterlevels_2018 <- df_waterlevels %>%
filter(yr == 2018)
a <- ggplot() +
geom_line(data = df_waterlevels_2018, aes(x = km, y = 0), col = "orangered") +
geom_line(data = df_waterlevels_2018, aes(x = km, y = waterlevel_diff), col = "cyan3", size = 2) +
geom_label(aes(x = 2, y = 140, label = "difference in weekly avarage waterlevel of 2018"),
size = 6, color = "white", fill = " cyan3", fontface = "bold", hjust = "left") +
geom_label(aes(x = 2, y = 120, label = "compared to the weekly avarage waterlevel of 2017"),
size = 6, color = "white", fill = " cyan3", fontface = "bold", hjust = "left") +
geom_label(aes(x = 2, y = 100, label = "weekly avarage waterlevel of 2017 (is zero)"),
size = 5, color = "white", fill = " orangered", fontface = "bold", hjust = "left") +
theme_minimal() +
scale_x_continuous(breaks = pointinfo$km,
minor_breaks = NULL,
labels = pointinfo$station) +
theme(axis.text.x = element_text(face = "bold", size = 14, angle = 340)) +
## gganimate options
labs(title = "weeknumber: {closest_state} - 2018",
x = "measurepoint",
y = "") +
transition_states(weeknr, transition_length = 4, state_length = 0.5) +
ease_aes("sine-in-out")
## with the explicite animate call there are more animation options available
animate(a, nframes = 400, width = 800, height = 600)
# anim_save("waterlevels.gif")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::insert_image_addin()
a <- ggplot() +
geom_line(data = df_waterlevels_2018, aes(x = km, y = 0), col = "orangered") +
geom_line(data = df_waterlevels_2018, aes(x = km, y = waterlevel_diff), col = "cyan3", size = 2) +
geom_label(aes(x = 2, y = 140, label = "difference in weekly avarage waterlevel of 2018"),
size = 6, color = "white", fill = " cyan3", fontface = "bold", hjust = "left") +
geom_label(aes(x = 2, y = 120, label = "compared to the weekly avarage waterlevel of 2017"),
size = 6, color = "white", fill = " cyan3", fontface = "bold", hjust = "left") +
geom_label(aes(x = 2, y = 100, label = "weekly avarage waterlevel of 2017 (is zero)"),
size = 5, color = "white", fill = " orangered", fontface = "bold", hjust = "left") +
theme_minimal() +
scale_x_continuous(breaks = pointinfo$km,
minor_breaks = NULL,
labels = pointinfo$station) +
theme(axis.text.x = element_text(face = "bold", size = 14, angle = 340)) +
## gganimate options
labs(title = "weeknumber: {closest_state} - 2018",
x = "measurepoint",
y = "") +
transition_states(weeknr, transition_length = 4, state_length = 0.5) +
ease_aes("sine-in-out")
## with the explicite animate call there are more animation options available
animate(a, nframes = 400, width = 800, height = 600)
# anim_save("waterlevels.gif")
blogdown:::insert_image_addin()
traceback()
blogdown:::insert_image_addin()
install.packages("digest")
blogdown:::new_post_addin()
blogdown:::serve_site()
library(tidyverse)
library(zoo)
library(readxl)
library(lubridate)
library(magrittr)
library(gganimate)
library(ggmap)
library(ggrepel)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
library(tidyverse)
library(zoo)
library(readxl)
library(lubridate)
library(magrittr)
library(gganimate)
library(ggmap)
library(ggrepel)
##times from the 2017 race: https://www.nnzevenheuvelenloop.nl/deelnemers/zevenheuvelenloop/uitslagen/ (in dutch)
times <- data.frame(runners = rep(1:5, each = 15),
km = rep(1:15, 5),
time = rep(c("00:02:37", "00:05:27",	"00:08:19",	"00:11:07",	"00:13:58",	"00:16:46",	"00:19:27",	"00:22:22",
"00:25:11", "00:27:46",	"00:30:37",	"00:33:24",	"00:36:02",	"00:38:39",	"00:41:16",
"00:05:41", "00:11:27",	"00:17:22",	"00:23:08",	"00:29:01",	"00:34:53",	"00:40:30",	"00:46:21",
"00:52:05", "00:57:37",	"01:03:44",	"01:09:32",	"01:15:02",	"01:20:39",	"01:26:03",
"00:05:01", "00:09:59",	"00:15:12",	"00:20:24",	"00:25:55",	"00:31:16",	"00:36:29",	"00:42:08",
"00:47:34", "00:52:41",	"00:58:21",	"01:03:53",	"01:09:01",	"01:14:14",	"01:19:24",
"00:08:57", "00:18:21",	"00:27:31",	"00:39:57",	"00:48:44",	"00:57:58",	"01:13:31",	"01:23:03",
"01:32:01", "01:43:34",	"01:52:10",	"02:01:01",	"02:09:31",	"02:18:24",	"02:27:07",
"00:04:02", "00:07:55",	"00:11:53",	"00:15:55",	"00:20:07",	"00:24:11",	"00:28:06",	"00:32:22",
"00:36:30", "00:40:17",	"00:44:29",	"00:48:33",	"00:52:21",	"00:56:10",	"00:59:59")))
route <- read.csv2("C:/Users/Administrator/Desktop/Projects/2018/7heuvelenloop/zevenheuvelenpointsm.csv", stringsAsFactors = FALSE)
## coordinate points are equally spaced from eachother divided over the 15 km. Adding distance to the coordinates in meters...
route <- route %>%
mutate(x = 15000/(nrow(route)-1),
meter = cumsum(x)-x) %>%
select(X, Y, meter)
## ...in kilometers
route$km <- NA
for (i in seq(0, 15000, by = 1000)) {
route$km[which(abs(route$meter-i) == min(abs(route$meter-i)))] <- i / 1000
}
route_times <- times %>%
## joining meters of the route to running times
full_join(route %>% select(meter, km), by = "km") %>%
## getting meters along the route for every runner
complete(runners, meter) %>%
## joining remaining route data
left_join(route %>% select(-km), by = "meter") %>%
mutate(km = if_else(meter == 0 , 1, km),
time = if_else(meter == 0 , "00:00:00", as.character(time))) %>%
filter(!is.na(runners)) %>%
## fill in amount of seconds run so far for each point on the route.
group_by(runners) %>%
mutate(sec = na.approx(period_to_seconds(hms(time)))) %>%
fill(km, .direction = "up") %>%
ungroup() %>%
mutate(X = as.numeric(as.character(X)),
Y = as.numeric(as.character(Y)))
## calculate the closes position of the runner every 15 seconds. So runners progress in
## even timeframes for easier animations
route_times <-  route_times %>%
mutate(sec15 = ceiling(sec / 15) * 15)
## calculate avarage speed each km for labeling
avg_speed <- route_times %>%
group_by(runners, km) %>%
summarise(sec_tot_prev = max(sec)) %>%
mutate(km = km + 1) %>%
right_join(route_times %>% group_by(runners, km) %>%
summarise(sec_tot_km = max(sec)),
by = c("runners", "km")) %>%
mutate(avg_speed = if_else(km == 1, round(3600 / sec_tot_km, 1),
round(3600 / (sec_tot_km - sec_tot_prev), 1))) %>%
select(runners, km, avg_speed)
## finishtime for labeling
finish_time <- route_times %>%
group_by(runners) %>%
filter(meter == max(meter)) %>%
mutate(finishtime = time) %>%
select(runners, finishtime)
## select the point where the runners are each 15 seconds
route_times_15sec <- route_times %>%
group_by(sec15, runners) %>%
summarise_all(.funs = first) %>%
## add the labels
left_join(avg_speed, by = c("runners", "km")) %>%
left_join(finish_time, by = "runners") %>%
ungroup() %>%
mutate(label_t = paste0(finishtime, " -- ", avg_speed, " km/h"),
label_time = seconds_to_period(sec15),
label_time = paste0("race time: ", label_time)) %>%
select(-time)
## get mean coordinates for the centre of the plot
lat <- mean(c(max(route_times$Y), min(route_times$Y)))
long <- mean(c(max(route_times$X), min(route_times$X)))
# register_google(key = "AIzaSyC8K2r3R1x4GNLFINGbH0-plIhAE63KnqM")
## get the background map
m <- get_map(c(long, lat), zoom = 13,
source = "stamen",
maptype = "toner")
## route coordinates: https://www.gpscoordinaten.nl/route-track-detail.php?id=27527 downloaded and prepared with Qgis
route <- read.csv2("zevenheuvelenpointsm.csv", stringsAsFactors = FALSE)
## coordinate points are equally spaced from eachother divided over the 15 km. Adding distance to the coordinates in meters...
route <- route %>%
mutate(x = 15000/(nrow(route)-1),
meter = cumsum(x)-x) %>%
select(X, Y, meter)
## ...in kilometers
route$km <- NA
for (i in seq(0, 15000, by = 1000)) {
route$km[which(abs(route$meter-i) == min(abs(route$meter-i)))] <- i / 1000
}
register_google(key = "AIzaSyC8K2r3R1x4GNLFINGbH0-plIhAE63KnqM")
## get mean coordinates for the centre of the plot
lat <- mean(c(max(route_times$Y), min(route_times$Y)))
long <- mean(c(max(route_times$X), min(route_times$X)))
# register_google(key = "AIzaSyC8K2r3R1x4GNLFINGbH0-plIhAE63KnqM")
## get the background map
m <- get_map(c(long, lat), zoom = 13,
source = "stamen",
maptype = "toner")
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_5sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
animate(p, nframes = 500, width = 600, height = 600)
traceback()
##times from the 2017 race: https://www.nnzevenheuvelenloop.nl/deelnemers/zevenheuvelenloop/uitslagen/ (in dutch)
times <- data.frame(runners = rep(1:5, each = 15),
km = rep(1:15, 5),
time = rep(c("00:02:37", "00:05:27",	"00:08:19",	"00:11:07",	"00:13:58",	"00:16:46",	"00:19:27",	"00:22:22",
"00:25:11", "00:27:46",	"00:30:37",	"00:33:24",	"00:36:02",	"00:38:39",	"00:41:16",
"00:05:41", "00:11:27",	"00:17:22",	"00:23:08",	"00:29:01",	"00:34:53",	"00:40:30",	"00:46:21",
"00:52:05", "00:57:37",	"01:03:44",	"01:09:32",	"01:15:02",	"01:20:39",	"01:26:03",
"00:05:01", "00:09:59",	"00:15:12",	"00:20:24",	"00:25:55",	"00:31:16",	"00:36:29",	"00:42:08",
"00:47:34", "00:52:41",	"00:58:21",	"01:03:53",	"01:09:01",	"01:14:14",	"01:19:24",
"00:08:57", "00:18:21",	"00:27:31",	"00:39:57",	"00:48:44",	"00:57:58",	"01:13:31",	"01:23:03",
"01:32:01", "01:43:34",	"01:52:10",	"02:01:01",	"02:09:31",	"02:18:24",	"02:27:07",
"00:04:02", "00:07:55",	"00:11:53",	"00:15:55",	"00:20:07",	"00:24:11",	"00:28:06",	"00:32:22",
"00:36:30", "00:40:17",	"00:44:29",	"00:48:33",	"00:52:21",	"00:56:10",	"00:59:59")))
route <- read.csv2("C:/Users/Administrator/Desktop/Projects/2018/7heuvelenloop/zevenheuvelenpointsm.csv", stringsAsFactors = FALSE)
## coordinate points are equally spaced from eachother divided over the 15 km. Adding distance to the coordinates in meters...
route <- route %>%
mutate(x = 15000/(nrow(route)-1),
meter = cumsum(x)-x) %>%
select(X, Y, meter)
## ...in kilometers
route$km <- NA
for (i in seq(0, 15000, by = 1000)) {
route$km[which(abs(route$meter-i) == min(abs(route$meter-i)))] <- i / 1000
}
route_times <- times %>%
## joining meters of the route to running times
full_join(route %>% select(meter, km), by = "km") %>%
## getting meters along the route for every runner
complete(runners, meter) %>%
## joining remaining route data
left_join(route %>% select(-km), by = "meter") %>%
mutate(km = if_else(meter == 0 , 1, km),
time = if_else(meter == 0 , "00:00:00", as.character(time))) %>%
filter(!is.na(runners)) %>%
## fill in amount of seconds run so far for each point on the route.
group_by(runners) %>%
mutate(sec = na.approx(period_to_seconds(hms(time)))) %>%
fill(km, .direction = "up") %>%
ungroup() %>%
mutate(X = as.numeric(as.character(X)),
Y = as.numeric(as.character(Y)))
library(tidyverse)
library(zoo)
library(readxl)
library(lubridate)
library(magrittr)
library(gganimate)
library(ggmap)
library(ggrepel)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
##times from the 2017 race: https://www.nnzevenheuvelenloop.nl/deelnemers/zevenheuvelenloop/uitslagen/ (in dutch)
times <- data.frame(runners = rep(1:5, each = 15),
km = rep(1:15, 5),
time = rep(c("00:02:37", "00:05:27",	"00:08:19",	"00:11:07",	"00:13:58",	"00:16:46",	"00:19:27",	"00:22:22",
"00:25:11", "00:27:46",	"00:30:37",	"00:33:24",	"00:36:02",	"00:38:39",	"00:41:16",
"00:05:41", "00:11:27",	"00:17:22",	"00:23:08",	"00:29:01",	"00:34:53",	"00:40:30",	"00:46:21",
"00:52:05", "00:57:37",	"01:03:44",	"01:09:32",	"01:15:02",	"01:20:39",	"01:26:03",
"00:05:01", "00:09:59",	"00:15:12",	"00:20:24",	"00:25:55",	"00:31:16",	"00:36:29",	"00:42:08",
"00:47:34", "00:52:41",	"00:58:21",	"01:03:53",	"01:09:01",	"01:14:14",	"01:19:24",
"00:08:57", "00:18:21",	"00:27:31",	"00:39:57",	"00:48:44",	"00:57:58",	"01:13:31",	"01:23:03",
"01:32:01", "01:43:34",	"01:52:10",	"02:01:01",	"02:09:31",	"02:18:24",	"02:27:07",
"00:04:02", "00:07:55",	"00:11:53",	"00:15:55",	"00:20:07",	"00:24:11",	"00:28:06",	"00:32:22",
"00:36:30", "00:40:17",	"00:44:29",	"00:48:33",	"00:52:21",	"00:56:10",	"00:59:59")))
route <- read.csv2("C:/Users/Administrator/Desktop/Projects/2018/7heuvelenloop/zevenheuvelenpointsm.csv", stringsAsFactors = FALSE)
## coordinate points are equally spaced from eachother divided over the 15 km. Adding distance to the coordinates in meters...
route <- route %>%
mutate(x = 15000/(nrow(route)-1),
meter = cumsum(x)-x) %>%
select(X, Y, meter)
## ...in kilometers
route$km <- NA
for (i in seq(0, 15000, by = 1000)) {
route$km[which(abs(route$meter-i) == min(abs(route$meter-i)))] <- i / 1000
}
route_times <- times %>%
## joining meters of the route to running times
full_join(route %>% select(meter, km), by = "km") %>%
## getting meters along the route for every runner
complete(runners, meter) %>%
## joining remaining route data
left_join(route %>% select(-km), by = "meter") %>%
mutate(km = if_else(meter == 0 , 1, km),
time = if_else(meter == 0 , "00:00:00", as.character(time))) %>%
filter(!is.na(runners)) %>%
## fill in amount of seconds run so far for each point on the route.
group_by(runners) %>%
mutate(sec = na.approx(period_to_seconds(hms(time)))) %>%
fill(km, .direction = "up") %>%
ungroup() %>%
mutate(X = as.numeric(as.character(X)),
Y = as.numeric(as.character(Y)))
## calculate the closes position of the runner every 15 seconds. So runners progress in
## even timeframes for easier animations
route_times <-  route_times %>%
mutate(sec15 = ceiling(sec / 15) * 15)
## calculate avarage speed each km for labeling
avg_speed <- route_times %>%
group_by(runners, km) %>%
summarise(sec_tot_prev = max(sec)) %>%
mutate(km = km + 1) %>%
right_join(route_times %>% group_by(runners, km) %>%
summarise(sec_tot_km = max(sec)),
by = c("runners", "km")) %>%
mutate(avg_speed = if_else(km == 1, round(3600 / sec_tot_km, 1),
round(3600 / (sec_tot_km - sec_tot_prev), 1))) %>%
select(runners, km, avg_speed)
## finishtime for labeling
finish_time <- route_times %>%
group_by(runners) %>%
filter(meter == max(meter)) %>%
mutate(finishtime = time) %>%
select(runners, finishtime)
## calculate avarage speed each km for labeling
avg_speed <- route_times %>%
group_by(runners, km) %>%
summarise(sec_tot_prev = max(sec)) %>%
mutate(km = km + 1) %>%
right_join(route_times %>% group_by(runners, km) %>%
summarise(sec_tot_km = max(sec)),
by = c("runners", "km")) %>%
mutate(avg_speed = if_else(km == 1, round(3600 / sec_tot_km, 1),
round(3600 / (sec_tot_km - sec_tot_prev), 1))) %>%
select(runners, km, avg_speed)
## finishtime for labeling
finish_time <- route_times %>%
group_by(runners) %>%
filter(meter == max(meter)) %>%
mutate(finishtime = time) %>%
select(runners, finishtime)
## select the point where the runners are each 15 seconds
route_times_15sec <- route_times %>%
group_by(sec15, runners) %>%
summarise_all(.funs = first) %>%
## add the labels
left_join(avg_speed, by = c("runners", "km")) %>%
left_join(finish_time, by = "runners") %>%
ungroup() %>%
mutate(label_t = paste0(finishtime, " -- ", avg_speed, " km/h"),
label_time = seconds_to_period(sec15),
label_time = paste0("race time: ", label_time)) %>%
select(-time)
## get mean coordinates for the centre of the plot
lat <- mean(c(max(route_times$Y), min(route_times$Y)))
long <- mean(c(max(route_times$X), min(route_times$X)))
## register_google(key = "key")
## get the background map
m <- get_map(c(long, lat), zoom = 13,
source = "stamen",
maptype = "toner")
register_google(key = "AIzaSyC8K2r3R1x4GNLFINGbH0-plIhAE63KnqM")
## get mean coordinates for the centre of the plot
lat <- mean(c(max(route_times$Y), min(route_times$Y)))
long <- mean(c(max(route_times$X), min(route_times$X)))
## register_google(key = "key")
## get the background map
m <- get_map(c(long, lat), zoom = 13,
source = "stamen",
maptype = "toner")
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_5sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
animate(p, nframes = 500, width = 600, height = 600)
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_5sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
animate(p, nframes = 500, width = 600, height = 600)
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_5sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
p <- ggmap(m) +
scale_x_continuous(limits = c(min(route_times$X), max(route_times$X)), expand = c(0.0015, 0.0015)) +
scale_y_continuous(limits = c(min(route_times$Y), max(route_times$Y)), expand = c(0.0015, 0.0015)) +
geom_point(data = route_times_15sec, aes(x = X, y = Y,
color = as.factor(runners)), size = 5)+
geom_label_repel(data = route_times_15sec,
aes(x = X, y = Y,
fill = as.factor(runners),
label = label_t),
size = 4, fontface = "bold",
## padding to keep the labels from covering the points
box.padding = 0.35, point.padding = 1,
## without the nudging the labels are more jittery
nudge_y = 0.0025, nudge_x = 0.02) +
## couldnt get the title to work so added a label layer with the racetime
geom_label(data = route_times_15sec %>% filter(runners == 4),
aes(x =  5.867, y = 51.79665,label = label_time),
size = 4.5, color = "black", fill = " white", fontface = "bold", hjust = "left") +
theme_void() +
theme(legend.position = "none") +
## gg animate options
transition_reveal(runners, sec15) +
ease_aes("linear")
animate(p, nframes = 500, width = 600, height = 600)
googleAuthR:::gar_gadget()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
knit_with_parameters('C:/Users/Administrator/Desktop/Projects/website/content/post/2018-10-17-water-levels-of-the-waal-river-animated.Rmd')
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
