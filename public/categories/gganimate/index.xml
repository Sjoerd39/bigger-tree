<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gganimate on BiggeR-tRee</title>
    <link>/categories/gganimate/</link>
    <description>Recent content in Gganimate on BiggeR-tRee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/gganimate/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Happy holidays!</title>
      <link>/2019/12/25/happy-holidays/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/25/happy-holidays/</guid>
      <description>Happy holidays to you all! For a short project I turned the population pyramid of the city Nijmegen, the Netherlands into a shiny christmas tree.
The rough translation of the text is &amp;lsquo;have a good/ nice holiday and a significant happy new year&amp;rsquo;. The code for this tree you can see below. It has several sections, but the tree and the baubles are made in seperate dataframes but with the same time reference.</description>
    </item>
    
    <item>
      <title>Random Walking</title>
      <link>/2019/09/14/random-walking/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/14/random-walking/</guid>
      <description>A short project to explore the use of random walk algorithms with the igraph package and make an awesome animation! Random walk algorithms are used to estimate how information spreads across a given graph. An example can be the spread of persons within the walking routes in a theme park. Another applications include the PageRank algorithm, famously invented by Google founder Larry Page to measure the importance of websites.
Here we will try to make a person walk through a graph that for example can be the walking paths in a park.</description>
    </item>
    
    <item>
      <title>Generative animated art with spotifyR</title>
      <link>/2019/06/05/generative-animated-art-with-spotifyr/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/05/generative-animated-art-with-spotifyr/</guid>
      <description>So I came across the awesome Spotifyr spotifyr package earlier this year. A package that lets you easily explore the extensive Spotify API within R. And when I read this article about generative art on Quantixed made in R it got me thinking about combining these two.
The end result is a continuously updating &amp;lsquo;art piece&amp;rsquo; made in Shiny. Generated by the computer with input from the music I play on Spotify.</description>
    </item>
    
    <item>
      <title>R fireworks!</title>
      <link>/2018/12/22/r-fireworks/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/12/22/r-fireworks/</guid>
      <description>Happy holidays! Happy new year! As a last project and seasonal greetings I wanted to simulate fireworks within R With gganimate. And it really worked! See the awesome result:


Basically the code generates a lot of points and gets different samples. It&amp;rsquo;s then using the Kmeans algorithm to get the clusters of points and with that the colors. The amount of clusters is randomized between 1 and 10. This is repeated a couple of times.</description>
    </item>
    
    <item>
      <title>Animated scribbles</title>
      <link>/2018/11/20/animated-scribbles/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/20/animated-scribbles/</guid>
      <description>Yes! Another animation! I saw the post of Antonio Sánchez Chinchón about his &amp;lsquo;frankenstein scribble&amp;rsquo; (Link to his blogpost) and immediatly thought this would like very nice when animated. Antonio uses the Travelling Salesman Problem and the TSP package to make a scribble based on a picture. The Basics from Antonio&amp;rsquo;s code stay the same. So, let&amp;rsquo;s see how to animate it!
library(tidyverse) library(imager) library(scales) library(TSP) library(gganimate) library(tweenr) library(animation)  Instead of Frankenstein, let&amp;rsquo;s use this picture of my girlfriend this time.</description>
    </item>
    
    <item>
      <title>Running a race animated</title>
      <link>/2018/11/07/running-a-race-animated/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/07/running-a-race-animated/</guid>
      <description>The 7-hills running race (7-heuvelenloop) is a yearly running race in and around Nijmegen. The main event is a race of 15 kilometers long. I ran it myself a couple of times, but not in last year. On to animating the race. Using the following packages:
library(tidyverse) library(zoo) library(readxl) library(lubridate) library(magrittr) library(gganimate) library(ggmap) library(ggrepel)  I took data of 5 runners from the website with the results and times each kilometer.</description>
    </item>
    
    <item>
      <title>Water levels of the Waal river animated</title>
      <link>/2018/10/17/water-levels-of-the-waal-river-animated/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/17/water-levels-of-the-waal-river-animated/</guid>
      <description>Inspired by the dry weather of the last couple of months in the Neterlands, the overhaul of the gganimate package and examples like on this blog: https://adventuresindata.blogspot.com/2018/10/animated-river-flow-revisited.html i wanted to see how low the water levels really are. And ofcourse to animate the visuals!
Data of water levels in the Netherlands are available through: https://waterinfo.rws.nl/#!/nav/index/ (in dutch)
loading packages:
# devtools::install_github(&#39;thomasp85/gganimate&#39;) # devtools::install_github(&amp;quot;thomasp85/transformr&amp;quot;) library(tidyverse) library(janitor) library(lubridate) library(gganimate)  I manually gathered some metadata of the measuring stations:</description>
    </item>
    
  </channel>
</rss>