<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on BiggeR-tRee</title>
    <link>/categories/r/</link>
    <description>Recent content in R on BiggeR-tRee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Happy holidays!</title>
      <link>/2019/12/25/happy-holidays/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/12/25/happy-holidays/</guid>
      <description>Happy holidays to you all! For a short project I turned the population pyramid of the city Nijmegen, the Netherlands into a shiny christmas tree.
The rough translation of the text is &amp;lsquo;have a good/ nice holiday and a significant happy new year&amp;rsquo;. The code for this tree you can see below. It has several sections, but the tree and the baubles are made in seperate dataframes but with the same time reference.</description>
    </item>
    
    <item>
      <title>2 animated race shiny app</title>
      <link>/2019/10/12/2-animated-race-shiny-app/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/12/2-animated-race-shiny-app/</guid>
      <description>Post number 2? Yes! In an earlier post I made an animation of a running race. Since then I wanted to make a shiny app out of this idea so that people can add themselves on the track and animate their own race. And now it&amp;rsquo;s finally finished! You can try it for yourself here: seven hills race app.
I&amp;rsquo;ll explain some of the more important components of the app. The first thing is processing the user input.</description>
    </item>
    
    <item>
      <title>Random Walking</title>
      <link>/2019/09/14/random-walking/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/14/random-walking/</guid>
      <description>A short project to explore the use of random walk algorithms with the igraph package and make an awesome animation! Random walk algorithms are used to estimate how information spreads across a given graph. An example can be the spread of persons within the walking routes in a theme park. Another applications include the PageRank algorithm, famously invented by Google founder Larry Page to measure the importance of websites.
Here we will try to make a person walk through a graph that for example can be the walking paths in a park.</description>
    </item>
    
    <item>
      <title>Generative animated art with spotifyR</title>
      <link>/2019/06/05/generative-animated-art-with-spotifyr/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/05/generative-animated-art-with-spotifyr/</guid>
      <description>So I came across the awesome Spotifyr spotifyr package earlier this year. A package that lets you easily explore the extensive Spotify API within R. And when I read this article about generative art on Quantixed made in R it got me thinking about combining these two.
The end result is a continuously updating &amp;lsquo;art piece&amp;rsquo; made in Shiny. Generated by the computer with input from the music I play on Spotify.</description>
    </item>
    
    <item>
      <title>Synthetic Data</title>
      <link>/2019/05/18/synthetic-data/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/18/synthetic-data/</guid>
      <description>There is an increasing need to collaborate between government agencies in developing models to look for better ways to provide the services their citizens need. Often this involves working with a lot of privacy sensitive data. And therefore there are a lot of (legal) issues in sharing these data sets and subsequently the models. I have been looking for ways to generate synthetic data sets with the same properties and structure as the real data sets but without the real rows of data.</description>
    </item>
    
    <item>
      <title>Speech generator</title>
      <link>/2019/01/24/speech-generator/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/01/24/speech-generator/</guid>
      <description>I was asked to introduce an Artificial Intelligence workshop for government employees (colleagues). I thought i could do that through an (AI) speech generator. So I made one. Incorporating some Language Processing techniques I recently worked with.
The generator contains the content of 45 speeches in Enlish, mainly of English and American statesman. The sentences are cleaned (minimally) and separated. Checked for their sentiment (positive or negative). In the app you can choose the overall sentiment of the speech and add your own welcoming and closing messages.</description>
    </item>
    
    <item>
      <title>R fireworks!</title>
      <link>/2018/12/22/r-fireworks/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/12/22/r-fireworks/</guid>
      <description>Happy holidays! Happy new year! As a last project and seasonal greetings I wanted to simulate fireworks within R With gganimate. And it really worked! See the awesome result:


Basically the code generates a lot of points and gets different samples. It&amp;rsquo;s then using the Kmeans algorithm to get the clusters of points and with that the colors. The amount of clusters is randomized between 1 and 10. This is repeated a couple of times.</description>
    </item>
    
    <item>
      <title>streaming sensor data</title>
      <link>/2018/12/17/streaming-sensor-data/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/12/17/streaming-sensor-data/</guid>
      <description>At the municipality i work at we increasingly want to anlyse and publish real time data. As probably every organization =). This is a small practice project where i want to gather live data. Analyze it. And present it in a live, self-updating dashboard.
The data i gather is from sensors placed in the city of Nijmegen for the Smart Emissions project. Citizens of Nijmegen and the municipality placed several cheap sensors around town to measure temperatures, content of the air (PM 2,5, NO2 etc.</description>
    </item>
    
    <item>
      <title>Animated scribbles</title>
      <link>/2018/11/20/animated-scribbles/</link>
      <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/20/animated-scribbles/</guid>
      <description>Yes! Another animation! I saw the post of Antonio Sánchez Chinchón about his &amp;lsquo;frankenstein scribble&amp;rsquo; (Link to his blogpost) and immediatly thought this would like very nice when animated. Antonio uses the Travelling Salesman Problem and the TSP package to make a scribble based on a picture. The Basics from Antonio&amp;rsquo;s code stay the same. So, let&amp;rsquo;s see how to animate it!
library(tidyverse) library(imager) library(scales) library(TSP) library(gganimate) library(tweenr) library(animation)  Instead of Frankenstein, let&amp;rsquo;s use this picture of my girlfriend this time.</description>
    </item>
    
    <item>
      <title>Running a race animated</title>
      <link>/2018/11/07/running-a-race-animated/</link>
      <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/07/running-a-race-animated/</guid>
      <description>The 7-hills running race (7-heuvelenloop) is a yearly running race in and around Nijmegen. The main event is a race of 15 kilometers long. I ran it myself a couple of times, but not in last year. On to animating the race. Using the following packages:
library(tidyverse) library(zoo) library(readxl) library(lubridate) library(magrittr) library(gganimate) library(ggmap) library(ggrepel)  I took data of 5 runners from the website with the results and times each kilometer.</description>
    </item>
    
    <item>
      <title>Water levels of the Waal river animated</title>
      <link>/2018/10/17/water-levels-of-the-waal-river-animated/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/17/water-levels-of-the-waal-river-animated/</guid>
      <description>Inspired by the dry weather of the last couple of months in the Neterlands, the overhaul of the gganimate package and examples like on this blog: https://adventuresindata.blogspot.com/2018/10/animated-river-flow-revisited.html i wanted to see how low the water levels really are. And ofcourse to animate the visuals!
Data of water levels in the Netherlands are available through: https://waterinfo.rws.nl/#!/nav/index/ (in dutch)
loading packages:
# devtools::install_github(&#39;thomasp85/gganimate&#39;) # devtools::install_github(&amp;quot;thomasp85/transformr&amp;quot;) library(tidyverse) library(janitor) library(lubridate) library(gganimate)  I manually gathered some metadata of the measuring stations:</description>
    </item>
    
    <item>
      <title>Long words with Seven-Segment Displays</title>
      <link>/2018/10/09/long-words-with-seven-segment-displays/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/09/long-words-with-seven-segment-displays/</guid>
      <description>One of the most entertaining things you could do at primary school was spelling words with the seven-segment calculator. A little while ago Tom Scott did a video about seven-segment displays. You can see it here:
 
 This is exactly the quick and fun exercise i need to start my blog. And i think R (plus some packages) is especially suited for this task. So, what are the longest words we can make with the limitations of a seven-segment display?</description>
    </item>
    
  </channel>
</rss>